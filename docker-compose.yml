version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:5000
      - REACT_APP_SOCKET_URL=http://localhost:5000
      - NODE_ENV=development
      - DANGEROUSLY_DISABLE_HOST_CHECK=true
      - WDS_SOCKET_PORT=0
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend:/app/frontend
      - /app/frontend/node_modules
    depends_on:
      - backend
    networks:
      - app_network
    restart: "no"
    stop_grace_period: 1m
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "5000:5000"
    environment:
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=development
      - KAFKA_BROKER=kafka:9093
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGODB_URI=mongodb+srv://${DB_USERNAME}:${DB_PASSWORD}@cluster0.t7rpzk9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
      - CORS_ORIGIN=http://localhost:3000
      - PORT=5000
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./backend:/app/backend
      - /app/backend/node_modules
      - ./comconnect-2b1d7-firebase-adminsdk-20r1n-c127902f6f.json:/app/backend/config/comconnect-2b1d7-firebase-adminsdk-20r1n-c127902f6f.json
    depends_on:
      - redis
      - kafka
    networks:
      - app_network
    restart: "no"
    stop_grace_period: 1m
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  zookeeper:
    image: bitnami/zookeeper:3.7.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_LISTENER_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"
    networks:
      - app_network

  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_LISTENERS: INSIDE_KAFKA://0.0.0.0:9093,OUTSIDE_KAFKA://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE_KAFKA://kafka:9093,OUTSIDE_KAFKA://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE_KAFKA:PLAINTEXT,OUTSIDE_KAFKA:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE_KAFKA
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    ports:
      - "9092:9092"
      - "9093:9093"
    networks:
      - app_network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app_network

networks:
  app_network:
    driver: bridge